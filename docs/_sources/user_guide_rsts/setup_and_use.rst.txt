.. _scarabaeus-setup:

.. create a gold color role
.. raw:: html

    <style> .gold {color:rgb(207 184 124)} </style>

.. role:: gold

.. create a role that makes bolded text colored blue as well
.. raw:: html

    <style> .bold {font-weight: bold; color:rgb(2 119 189)} </style>

.. role:: bold

=======================
:gold:`Getting Started`
=======================

----------------------
:gold:`Install Python`
----------------------
Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.

Install Python - `3.11.9 <https://www.python.org/downloads/release/python-3119/>`_

-------------------
:gold:`Install Git`
-------------------

Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Install Git if your machine does not already have it. Most MAC and Linux machines will have Git already installed.

Install Git - `Git Download <https://git-scm.com/downloads/>`_

-----------------------------------------------------------
:gold:`Install an Integrated Development Environment (IDE)`
-----------------------------------------------------------

Use any IDE or text editor you like. We encourage the use of an IDE that has add-ons to make development a bit easier. Some on the team use VSCode for its large ecosystem of powerful extensions. For SCB, we recommend using **VSCode** as your IDE, with the following extensions:

- GitLens
- SonarQube
- autoDocstring
- Python
- Pylance
- autoDocstring
- Ruff (set to format on saving, `VSCode Python Formatting <https://code.visualstudio.com/docs/python/formatting>`_)

----------------------------------
:gold:`Install MongoDB (optional)`
----------------------------------

MongoDB is an optional installation that facilitates the use of the tool when working with a large amount of data.

Windows
=======


- **Download**: Visit the `MongoDB Download Page <https://www.mongodb.com/try/download/community>`_ and download the MSI installer for Windows.
- **Install**: Run the MSI file and follow the installation prompts. Choose "Complete" setup type and ensure "Install MongoDB as a Service" is checked.
- **Set Up Environment**:
    - Add MongoDB to the system PATH:
    - Control Panel → System and Security → System → Advanced system settings → Environment Variables → Path → Edit → New → `C:\Program Files\MongoDB\Server\<version>\bin`
- **Start MongoDB**: Open Command Prompt as an administrator and run: 
.. code-block::

    mongod

Ensure the `C:\data\db` directory exists for data storage.


macOS
=====


**Prerequisites**: Homebrew requires the Xcode command-line tools.

**Install Xcode Command-Line Tools**:

.. code-block::

   xcode-select --install

**Install Homebrew**: Follow the official `Homebrew Documentation <https://brew.sh/#install>`_.

**Install MongoDB**:

.. code-block::

   brew tap mongodb/brew
   brew update
   brew install mongodb-community
   brew services start mongodb/brew/mongodb-community

(Optional) **Install Mongo Compass**:

- Visit the `MongoDB Compass Download Page <https://www.mongodb.com/try/download/compass>`_ and download the DMG installer for macOS.
- Run the DMG file and follow the installation prompts.

-----------------------------------------
:gold:`Setup LASP Credentials (optional)`
-----------------------------------------

This step is required only for members of the SCB team working with the MongoDB database.

Windows
=======

- Open the **Start Menu** and search for `Environment Variables`.
- Select **Edit the system environment variables**.
- In the **System Properties** dialog, click on **Environment Variables**.
- Under **System variables** or **User variables**, click **New**.
- Add:
    - **Variable name**: `LASP_USER_NAME`
    - **Variable value**: `<Your Value>`
    - **Variable name**: `LASP_PASSWORD`
    - **Variable value**: `<Your Value>`
- Click **OK** to save changes.

macOS/Linux
===========

- Open a terminal.
- Edit your shell configuration file:
    - For `bash`: `nano ~/.bashrc`
- Add the following lines at the end of the file:
    .. code-block:: sh
        export LASP_USER_NAME='YOUR_LASP_USER_NAME'
        export LASP_PASSWORD='YOUR_LASP_PASSWORD'
- Save and exit.
    - Press **CTRL + O** and then **Enter** to save
    - Press **CTRL + X** to exit
- Reload profile:
    .. code-block:: sh
        source ~/.bash_profile
- Verify the variable is set:
    .. code-block:: sh
        echo $LASP_USER_NAME

-----------------------------------
:gold:`Clone Scarabaeus Repository`
-----------------------------------

Clone the Scarabaeus repository to your local machine. You will need to setup some form of secure access between your machine and Gitlab before you are able to do this. The options for secure access are below. We highly recommend using SSH.

To setup a secure access method:

- **SSH - Recommended**:
    - On Gitlab, go to your **Preferences**. This can be done by clicking on your **user icon** in the top right corner, and the selecting **Preferences**.
    - Navigate to the menu on the far left of the screen and click on the **SSH Keys** option. This will have a key icon to the left of the text.
    - Follow the instructions on this page for adding an SSH key. The page contains links to documentation for how to set up the private and public key pair. We understand this process can be somewhat confusing so if you have any trouble please reach out to a fellow developer for assistance.
    - General GitLab SSH documentation can be found here `GitLab SSH Docs <https://docs.gitlab.com/ee/user/ssh.html>`_

Alternatively: 

- **HTTPS - Not Recommended**:
    - This process involves generating Gitlab Tokens. If you would like to use this method please reference the Gitlab documentation for a how-to.



Once you have a secure access method set up you can clone the Scarabaeus repository. You may do this via a terminal or your IDE. We recommend using your IDE as it makes things slightly simpler but this is up to you. The following instructions will be for cloning via SSH.

**Cloning via VSC**:

- Navigate to the Scarabaeus project on Gitlab and click on the Clone button shown in the image below..
- Copy the link under "Clone with SSH" (the one that starts with git@)
- Now navigate to VSCode, open a new window, and clock on the Clone Git Repository... option under the Start menu (center left of the window). Your screen should look like the image below.
- Next, paste the link you copied from Gitlab into the bar at the top of the VSCode window. From there follow the prompts to clone the repository.

|pic1|  |pic2|

.. |pic1| image:: ../../../images/readme_images/clone_repo_screenshot.png
   :width: 45%

.. |pic2| image:: ../../../images/readme_images/VSCode_New_Window.png
   :width: 45%

**Cloning via Command Line**:

In the terminal type:

.. code-block::

    git clone git@orccagitlab.colorado.edu:javi9068/scarabaeus.git

Refer to `GitLab CLI Cloning Guide <https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html>`_ for extra documentations on cloning via command line.

--------------------------------------
:gold:`Creating a Virtual Environment`
--------------------------------------
To create a virtual environment (venv) you have two options: 
 
From Terminal
=============
To create and activate a Python virtual environment:

.. code-block::

   python -m venv .venv
   .venv\Scripts\activate  # On Windows
   source .venv/bin/activate  # On macOS/Linux

To deactivate:

.. code-block::

   deactivate

In VSC
======

- Go to the search bar on top and click it
- Select **Show and Run Commands \>**
- Select **Python: Create Environment...**
- Select **Venv**
- Either **Use Existing** or **Delete and Recreate**
- Select the python interpreter as **Python 3.11.9**
- Select **requirements.txt**

and the venv will be generated following the list of libraries specified in **requirements.txt**

----------------------------
:gold:`Library Installation`
----------------------------

From Terminal
=============

Install required packages:

.. code-block::

   pip install -r requirements.txt

In VSC
======
    
Libraries are already installed in the last step of the venv generation.

External
========

Additionally, othe rdependencies (DWN, IAS15) needs to be installed manually from terminal

Install IAS15 integrator dependencies:

.. code-block::

   git submodule update --init
   pip install pyasa/.

On Windows, manually copy the shared library:

.. code-block::

   cp <venv>/Lib/site-packages/bin/pyasalib.dll <venv>/Lib/site-packages/pyasa/

where `<venv>` is your virtual environment directory.
